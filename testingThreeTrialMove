void openClaw(int enc_limit);
int moveDownTilTouch(int enc_limit_claw, float SIZE_OF_WHEEL);
bool testThreeTimes (int initX, int initY, int fX, int fY, bool pass, int trials);

void openClaw (int enc_limit)
{
	nMotorEncoder[motorD] = 0;
	motor[motorD] = -45;
	while(nMotorEncoder[motorD] > enc_limit)
	{}
	motor[motorD] = 0;
}

//made it int
int moveDownTilTouch (int enc_limit_claw, float SIZE_OF_WHEEL)
{
	openClaw(enc_limit_claw);
	//opens all the way
	int zENC_LIMIT = 35 * 360/ (2*PI*SIZE_OF_WHEEL);
	nMotorEncoder[motorC] = 0;
	motor[motorC] = 45;
	while(SensorValue[S1] == 0 && nMotorEncoder[motorC] < zENC_LIMIT) //touch sensor
	{}
	motor[motorC] = 0;
	return nMotorEncoder[motorC];
}

void closeClaw()
{
	motor[motorD] = 45;
	while (nMotorEncoder[motorD] < 0)
	{}
	motor[motorD] = 0;
}

void moveDistancePos (tMotor motorPort, float dist, float SIZE_OF_WHEEL) //we can decide on what positive is based on how we installed the motors
{
	nMotorEncoder[motorPort] = 0;
	motor[motorPort] = 45;
	int rotations = 0;
	rotations = dist * 360/ (2*PI*SIZE_OF_WHEEL);
	while (nMotorEncoder[motorPort] < rotations)
	{}

	motor[motorPort] = 0;
}

void moveDistanceNeg (tMotor motorPort, float dist, float SIZE_OF_WHEEL)
{

	nMotorEncoder[motorPort] = 0;
	motor[motorPort] = -45;
	int rotations = 0;
	rotations = -dist * 360/ (2*PI*SIZE_OF_WHEEL);
	while (nMotorEncoder[motorPort] > rotations)
	{}

	motor[motorPort] = 0;
}

bool pickUpPiece (float SIZE_OF_WHEEL)
{
	bool successful = true;

	int movedDown = moveDownTilTouch(-250, SIZE_OF_WHEEL)/360 * 2 * PI * SIZE_OF_WHEEL;

	if(SensorValue[S1] == 1)
	{
		moveDistanceNeg (motorC, movedDown, SIZE_OF_WHEEL);
		closeClaw();
		openClaw (-45);
		moveDistancePos(motorC, movedDown, SIZE_OF_WHEEL);
		closeClaw();
		moveDistanceNeg(motorC, movedDown, SIZE_OF_WHEEL);
		return successful;
	}
	else
	{
		return false;
	}
}

void dropPiece(float SIZE_OF_WHEEL)
{
	int enc_limit = -45;
	int dist = 15;
	moveDistancePos (motorC, dist, SIZE_OF_WHEEL);

	openClaw(enc_limit);
	moveDistanceNeg (motorC, dist, SIZE_OF_WHEEL);

	closeClaw();
}


//not same as original checkFound in dumdumdum
bool checkFound(int posX, int posY, float SIZE_OF_WHEEL)
{	
	bool found = false;
	int enc_limit = -250;
	//	moveToSquare(posX, posY);
	moveDownTilTouch(enc_limit, SIZE_OF_WHEEL);
	if (SensorValue[S1] == 1 && '.' == '.') { //the piece was previously there
		found = true;
	}
	moveDistanceNeg(motorC,28, 1);
	closeClaw();
	return found;

}

void moveToSquare(int row, int col)
{
	//starting position (7, 0)
	int enc_limit_row = 0;
	int enc_limit_col = 0;

	enc_limit_row = (7-row)*(5.72)* 360/(2*PI*0.8);
	enc_limit_col = -col*(5.72) * 360/(2*PI*3.1/2);
	if (nMotorEncoder[motorB] < enc_limit_row)
	{
		motor[motorB] = 35;
		while (nMotorEncoder[motorB] < enc_limit_row)
		{}
		motor[motorB] = 0;
	}
	else if (nMotorEncoder[motorB] > enc_limit_row)
	{
		motor[motorB] = -35;
		while (nMotorEncoder[motorB] > enc_limit_row)
		{}
		motor[motorB] = 0;
	}

	if (nMotorEncoder[motorA] < enc_limit_col)
	{
		motor[motorA] = 35;
		while (nMotorEncoder[motorA] < enc_limit_col)
		{}
		motor[motorA] = 0;
	}
	else if (nMotorEncoder[motorA] > enc_limit_col)
	{
		motor[motorA] = -35;
		while (nMotorEncoder[motorA] > enc_limit_col)
		{}
		motor[motorA] = 0;
	}
}

//function to test the pickup and drop off five times (MAIN FUNCTION TO BE TESTED HERE)
// values are INCORRECT for passing
bool testThreeTimes (int initX, int initY, int fX, int fY, bool pass, int trials) {
	if (!pass) {
		pass = true; //reset to true
		moveToSquare(initX, initY);
		if (pickUpPiece(1)) {
			moveToSquare(fX,fY);
			dropPiece(1);
			if (!checkFound(fX, fY, 1)) {

				moveToSquare(initX, initY);
				pass = false;
				trials++;
			}
			} else {
			pass = false;
			trials++;
			closeClaw();
			moveDistanceNeg(motorC,15, 1);
		}
	}

	if (trials == 3 && !pass)
		return false;

	if (!pass && trials < 3) {
		testThreeTimes(initX, initY, fX, fY, false, trials);
	}

	return true;
}

task main()
{
	SensorType[S1] = sensorEV3_Touch;

	testThreeTimes(5,6,3,2,false,0);

}
